name: OpenWrt-CI

on:
  workflow_dispatch: 
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_PW:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

permissions: write-all

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout #拉取仓库
        uses: actions/checkout@master

      - name: Space cleanup and Initialization environment #清理&准备环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update
          sudo -E apt -y full-upgrade
          sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          sudo chmod +x $GITHUB_WORKSPACE/Scripts/Packages.sh
          sudo chmod +x $GITHUB_WORKSPACE/Scripts/Settings.sh

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/openwrt

      - name: Clone Repo #克隆仓库
        run: |
          git clone --single-branch --branch $WRT_BRANCH $WRT_REPO ./openwrt/

      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: | #临时方案 更换大分区DTS

          rm openwrt/target/linux/mediatek/dts/mt7981b-cudy-tr3000-v1.dts
          cp -r $GITHUB_WORKSPACE/dts/* openwrt/target/linux/mediatek/dts/

          cd openwrt/package
          
          $GITHUB_WORKSPACE/Scripts/Packages.sh
          cd ..
          curl -sSL https://raw.githubusercontent.com/chenmozhijin/turboacc/luci/add_turboacc.sh -o add_turboacc.sh && bash add_turboacc.sh
          cp -r $GITHUB_WORKSPACE/files ./
          sed -i "s/__SSID__/$WRT_SSID/g" ./files/etc/uci-defaults/99-custom
          sed -i "s/__PASSWORD__/$WRT_WORD/g" ./files/etc/uci-defaults/99-custom
      
      - name: Generate configuration file
        run: |
          cd openwrt
          
          cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/General.txt >> .config
          
          $GITHUB_WORKSPACE/Scripts/Settings.sh
          make defconfig -j$(nproc)
          
      - name: Download packages
        run: |
          cd openwrt
          make download -j16
      
      - name: Patch Rust bootstrap for CI
        run: |
          cd openwrt

          mkdir -p feeds/packages/lang/rust/patches

          cp ../../Patch/001-no-ci-llvm.patch feeds/packages/lang/rust/patches/

          echo "✅ Rust bootstrap patch created"

          cat feeds/packages/lang/rust/patches/001-no-ci-llvm.patch
          
      - name: Compile firmware
        run: |
          cd openwrt

          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./openwrt/artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./openwrt/artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/